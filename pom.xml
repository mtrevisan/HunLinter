<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.github.mtrevisan</groupId>
	<artifactId>HunLinter</artifactId>
	<version>2.0.1-SNAPSHOT</version>

	<packaging>jar</packaging>

	<name>HunLinter</name>
	<description>Application for the linting of hunspell files</description>
	<url>https://github.com/mtrevisan/HunLinter</url>

	<developers>
		<developer>
			<name>Mauro Trevisan</name>
			<url>https://github.com/mtrevisan/</url>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:git@github.com:mtrevisan/HunLinter.git</connection>
		<developerConnection>scm:git:git@github.com:mtrevisan/HunLinter.git</developerConnection>
		<url>https://github.com/mtrevisan/HunLinter</url>
	</scm>

	<issueManagement>
		<url>https://github.com/mtrevisan/HunLinter/issues</url>
		<system>GitHub Issues</system>
	</issueManagement>

	<properties>
		<main.class>io.github.mtrevisan.hunlinter.MainFrame</main.class>
		<app.name>HunLinter</app.name>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<java.version>1.16</java.version>
		<maven.compiler.source>16</maven.compiler.source>
		<maven.compiler.target>16</maven.compiler.target>

		<javadoc.html.version>-html5</javadoc.html.version>

		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<build.timestamp>${maven.build.timestamp}</build.timestamp>

		<!-- This property is used to specify the modules included in the (custom) JVM image. -->
		<jvm.modules>java.desktop</jvm.modules>
		<!-- This ID is used by the Windows installer system to know that an installer is intended to replace/upgrade an earlier version.
			Grab a unique UUID via https://www.uuidgenerator.net -->
		<windows.upgrade.uuid>523ce3a3-9838-484b-8219-a3832bde60f9</windows.upgrade.uuid>
		<!-- This is used to set many user-visible fields in the Windows Installer. See win-jpackage.txt -->
		<windows.vendor>Mauro Trevisan's Tools</windows.vendor>

		<!-- Profiles & Build -->
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-source-plugin.version>3.2.1</maven-source-plugin.version>
		<maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-shade-plugin.version>3.3.0</maven-shade-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>
		<maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
		<codehaus.exec-maven-plugin.version>3.0.0</codehaus.exec-maven-plugin.version>

		<!-- Apache -->
		<apache.commons-text.version>1.9</apache.commons-text.version>
		<apache.commons-io.version>2.8.0</apache.commons-io.version>

		<!-- FastUtil -->
		<!--		<unimi.fastutil.version>8.5.2</unimi.fastutil.version>-->

		<!-- jFreeChart -->
		<jfree.jfreechart.version>1.5.3</jfree.jfreechart.version>

		<!-- Morfologik -->
		<carrot2.morfologik-tools.version>2.1.7</carrot2.morfologik-tools.version>

		<!-- JSON -->
		<googlecode.json-simple.version>1.1.1</googlecode.json-simple.version>

		<!-- CarrotSearch sizeof -->
		<!--		<carrotsearch.java-sizeof.version>0.0.5</carrotsearch.java-sizeof.version>-->

		<!-- Logging -->
		<logback.logback-classic.version>1.2.3</logback.logback-classic.version>

		<!-- JUnit -->
		<junit.junit-jupiter-engine.version>5.7.1</junit.junit-jupiter-engine.version>
	</properties>

	<profiles>
		<!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
        -->
		<profile>
			<id>installer-unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<platform>linux</platform>
			</properties>
		</profile>
		<profile>
			<id>installer-windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<platform>win</platform>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
						 installer package to run the executable after the installer runs, simplifying the user experience.
						  If you don't want this behavior, just delete this plug execution. -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${codehaus.exec-maven-plugin.version}</version>
						<executions>
							<execution>
								<phase>install</phase>
								<id>add-launch-to-msi</id>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>cscript</executable>
							<outputFile>${project.build.directory}/msi-result.log</outputFile>
							<workingDirectory>${project.build.directory}</workingDirectory>
							<arguments>
								<argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>installer-mac</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<properties>
				<platform>mac</platform>
			</properties>
		</profile>

		<profile>
			<id>stage</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<!-- mvn clean deploy -U -Dmaven.test.skip=true-->
			<id>release</id>
			<properties>
				<gpg.executable>gpg</gpg.executable>
			</properties>
			<build>
				<plugins>
					<!-- Signing JAR Files -->
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${maven-gpg-plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Deploy -->
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
						<version>${maven-deploy-plugin.version}</version>
					</plugin>
					<!-- Source -->
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>${maven-source-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- JavaDoc -->
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${maven-javadoc-plugin.version}</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<additionalOptions>${javadoc.html.version}</additionalOptions>
									<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
									<detectJavaApiLink>false</detectJavaApiLink>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<!-- Compiler -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<!-- Templating -->
			<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/templating-maven-plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>templating-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<id>generate-version-class</id>
						<goals>
							<goal>filter-sources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Shade -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin -->
			<!-- NOTE: shade 3.3.0 does not support java 16 yet! -->
<!--			<plugin>-->
<!--				<groupId>org.apache.maven.plugins</groupId>-->
<!--				<artifactId>maven-shade-plugin</artifactId>-->
<!--				<version>${maven-shade-plugin.version}</version>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						&lt;!&ndash; Run shade goal on package phase &ndash;&gt;-->
<!--						<phase>package</phase>-->
<!--						<goals>-->
<!--							<goal>shade</goal>-->
<!--						</goals>-->
<!--						<configuration>-->
<!--							<minimizeJar>true</minimizeJar>-->
<!--							<shadedArtifactAttached>true</shadedArtifactAttached>-->
<!--							<shadedClassifierName>shaded</shadedClassifierName>-->
<!--							<filters>-->
<!--								&lt;!&ndash; FIXME: strengthen the inclusions &ndash;&gt;-->
<!--								&lt;!&ndash; ClassNotFoundException: ch.qos.logback.classic.boolex.OnMarkerEvaluator&ndash;&gt;-->
<!--								<filter>-->
<!--									<artifact>ch.qos.logback:logback-classic</artifact>-->
<!--									<includes>-->
<!--										<include>**</include>-->
<!--									</includes>-->
<!--								</filter>-->
<!--								<filter>-->
<!--									<artifact>*:*</artifact>-->
<!--									<excludes>-->
<!--										<exclude>LICENSE.txt</exclude>-->
<!--										<exclude>META-INF/LICENSE</exclude>-->
<!--										<exclude>META-INF/LICENSE.txt</exclude>-->
<!--										<exclude>META-INF/NOTICE</exclude>-->
<!--										<exclude>META-INF/NOTICE.txt</exclude>-->
<!--									</excludes>-->
<!--								</filter>-->
<!--							</filters>-->
<!--							<transformers>-->
<!--								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">-->
<!--									<mainClass>${main.class}</mainClass>-->
<!--									<manifestEntries>-->
<!--										<X-Compile-Source-JDK>${maven.compiler.source}</X-Compile-Source-JDK>-->
<!--										<X-Compile-Target-JDK>${maven.compiler.target}</X-Compile-Target-JDK>-->
<!--										<Built-By>Mauro Trevisan</Built-By>-->
<!--										<Build-Jdk>${java.version} (${java.vendor} ${java.vm.version})</Build-Jdk>-->
<!--										<Build-OS>${os.name} ${os.arch} ${os.version}</Build-OS>-->
<!--									</manifestEntries>-->
<!--								</transformer>-->
<!--							</transformers>-->
<!--						</configuration>-->
<!--					</execution>-->
<!--				</executions>-->
<!--			</plugin>-->
			<!-- Install -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-install-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven-install-plugin.version}</version>
				<configuration>
					<!-- This is an app, so we don't want to install it in the local Maven repository -->
					<skip>true</skip>
				</configuration>
			</plugin>
			<!-- Dependency -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-dependency-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven-dependency-plugin.version}</version>
				<executions>
					<execution>
						<!-- This copies all of the jar files declared by the Maven build into a single directory.
						This makes it easy to assemble the final installer package -->
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- JAR -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
			<plugin>
				<!-- Put the application jar generated by the project into the dependency folder - the default folder
				for the maven-dependency-plugin output. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin.version}</version>
				<configuration>
					<outputDirectory>${project.build.directory}/dependency</outputDirectory>
				</configuration>
			</plugin>
			<!-- Vix -->
			<!-- https://github.com/wiverson/jtoolprovider-plugin -->
			<plugin>
				<groupId>io.github.wiverson</groupId>
				<artifactId>jtoolprovider-plugin</artifactId>
				<version>1.0.34</version>
				<executions>
					<execution>
						<id>jlink</id>
						<phase>package</phase>
						<goals>
							<goal>java-tool</goal>
						</goals>
						<configuration>
							<toolName>jlink</toolName>
							<removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
							<modulePath>${project.basedir}/${platform}/</modulePath>
							<addModules>${jvm.modules}</addModules>
							<output>${project.build.directory}/jvm-image</output>
							<args>
								<arg>--strip-native-commands</arg>
								<arg>--no-header-files</arg>
								<arg>--strip-debug</arg>
								<arg>--no-man-pages</arg>
								<arg>--compress=2</arg>
							</args>
						</configuration>
					</execution>
					<!-- The command that actually generates the installer. The options for each platform
					are found the /src/packaging directory. These files are copied into the target directory by
					the Maven resources plugin, which does the filtering to replace the original values with
					the actual Maven properties.
					https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
					-->
					<execution>
						<id>jpackage</id>
						<phase>install</phase>
						<goals>
							<goal>java-tool</goal>
						</goals>
						<configuration>
							<toolName>jpackage</toolName>
							<removeDirectories>${project.build.directory}/installer-work</removeDirectories>
							<args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<resources>
			<!-- include non-java src files in the same place in the output jar -->
			<resource>
				<directory>${project.build.sourceDirectory}</directory>
				<includes>
					<include>io.github.mtrevisan/hunlinter/languages/*/rules.properties</include>
				</includes>
			</resource>
			<resource>
				<!-- Here we are processing the platform-specific jpackage command files, adding in Maven properties for configuration. -->
				<directory>${project.basedir}/src/packaging</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/packaging</targetPath>
			</resource>
			<!-- Add the default resource path back in - by overriding above it disables the default -->
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<includes>
					<include>*.*</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>

	<dependencies>
		<!-- Apache -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-text -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>${apache.commons-text.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${apache.commons-io.version}</version>
		</dependency>

		<!-- FastUtil -->
		<!-- https://mvnrepository.com/artifact/it.unimi.dsi/fastutil -->
<!--		<dependency>-->
<!--			<groupId>it.unimi.dsi</groupId>-->
<!--			<artifactId>fastutil</artifactId>-->
<!--			<version>${unimi.fastutil.version}</version>-->
<!--		</dependency>-->


		<!-- jFreeChart -->
		<!-- https://mvnrepository.com/artifact/org.jfree/jfreechart -->
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>${jfree.jfreechart.version}</version>
		</dependency>

		<!-- Morfologik -->
		<!-- https://mvnrepository.com/artifact/org.carrot2/morfologik-tools -->
		<dependency>
			<groupId>org.carrot2</groupId>
			<artifactId>morfologik-tools</artifactId>
			<version>${carrot2.morfologik-tools.version}</version>
		</dependency>

		<!-- JSON -->
		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>${googlecode.json-simple.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>junit</artifactId>
					<groupId>junit</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Memory usage -->
		<!-- https://mvnrepository.com/artifact/com.carrotsearch/java-sizeof -->
<!--		<dependency>-->
<!--			<groupId>com.carrotsearch</groupId>-->
<!--			<artifactId>java-sizeof</artifactId>-->
<!--			<version>${carrotsearch.java-sizeof.version}</version>-->
<!--		</dependency>-->

		<!-- Logging -->
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.logback-classic.version}</version>
		</dependency>

		<!-- JUnit -->
		<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.junit-jupiter-engine.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://opensource.org/licenses/MIT</url>
			<distribution>manual</distribution>
		</license>
	</licenses>
</project>
